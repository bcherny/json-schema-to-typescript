{
  "id": "https://schema.management.azure.com/schemas/2019-03-01-preview/Microsoft.ServiceFabric.json#",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Microsoft.ServiceFabric",
  "description": "Microsoft ServiceFabric Resource Types",
  "resourceDefinitions": {
    "clusters": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The name of the cluster resource."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ClusterProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the cluster resource properties."
        },
        "resources": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/clusters_applicationTypes_childResource"
              },
              {
                "$ref": "#/definitions/clusters_applications_childResource"
              }
            ]
          }
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "Microsoft.ServiceFabric/clusters"
          ]
        }
      },
      "required": [
        "apiVersion",
        "location",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters"
    },
    "clusters_applications": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The name of the application resource."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ApplicationResourceProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The application resource properties."
        },
        "resources": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/clusters_applications_services_childResource"
              }
            ]
          }
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "Microsoft.ServiceFabric/clusters/applications"
          ]
        }
      },
      "required": [
        "apiVersion",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters/applications"
    },
    "clusters_applications_services": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The name of the service resource in the format of {applicationName}~{serviceName}."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ServiceResourceProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The service resource properties."
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "Microsoft.ServiceFabric/clusters/applications/services"
          ]
        }
      },
      "required": [
        "apiVersion",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters/applications/services"
    },
    "clusters_applicationTypes": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The name of the application type name resource."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ApplicationTypeResourceProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The application type name properties"
        },
        "resources": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "$ref": "#/definitions/clusters_applicationTypes_versions_childResource"
              }
            ]
          }
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "Microsoft.ServiceFabric/clusters/applicationTypes"
          ]
        }
      },
      "required": [
        "apiVersion",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters/applicationTypes"
    },
    "clusters_applicationTypes_versions": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The application type version."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ApplicationTypeVersionResourceProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The properties of the application type version resource."
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "Microsoft.ServiceFabric/clusters/applicationTypes/versions"
          ]
        }
      },
      "required": [
        "apiVersion",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters/applicationTypes/versions"
    }
  },
  "definitions": {
    "ApplicationDeltaHealthPolicy": {
      "type": "object",
      "properties": {
        "defaultServiceTypeDeltaHealthPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ServiceTypeDeltaHealthPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.\n"
        },
        "serviceTypeDeltaHealthPolicies": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ServiceTypeDeltaHealthPolicy"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Defines a map that contains specific delta health policies for different service types.\nEach entry specifies as key the service type name and as value a ServiceTypeDeltaHealthPolicy used to evaluate the service health when upgrading the cluster.\nThe map is empty by default.\n"
        }
      },
      "description": "Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster.\n"
    },
    "ApplicationHealthPolicy": {
      "type": "object",
      "properties": {
        "defaultServiceTypeHealthPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ServiceTypeHealthPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Represents the health policy used to evaluate the health of services belonging to a service type.\n"
        },
        "serviceTypeHealthPolicies": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ServiceTypeHealthPolicy"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Defines a ServiceTypeHealthPolicy per service type name.\n\nThe entries in the map replace the default service type health policy for each specified service type.\nFor example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.\nWith policy per service type, there's more granular control of the health of the service.\n\nIf no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.\n"
        }
      },
      "description": "Defines a health policy used to evaluate the health of an application or one of its children entities.\n"
    },
    "ApplicationMetricDescription": {
      "type": "object",
      "properties": {
        "maximumCapacity": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum node capacity for Service Fabric application.\nThis is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.\nIf set to zero, capacity for this metric is unlimited on each node.\nWhen creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.\nWhen updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the metric."
        },
        "reservationCapacity": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The node reservation capacity for Service Fabric application.\nThis is the amount of load which is reserved on nodes which have instances of this application.\nIf MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.\nIf set to zero, no capacity is reserved for this metric.\nWhen setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.\n"
        },
        "totalApplicationCapacity": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The total metric capacity for Service Fabric application.\nThis is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.\nWhen creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.\n"
        }
      },
      "description": "Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.\n"
    },
    "ApplicationResourceProperties": {
      "type": "object",
      "properties": {
        "maximumNodes": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node."
        },
        "metrics": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApplicationMetricDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "List of application capacity metric description."
        },
        "minimumNodes": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property."
        },
        "parameters": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "List of application parameters with overridden values from their default values specified in the application manifest."
        },
        "removeApplicationCapacity": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Remove the current application capacity settings."
        },
        "typeName": {
          "type": "string",
          "description": "The application type name as defined in the application manifest."
        },
        "typeVersion": {
          "type": "string",
          "description": "The version of the application type as defined in the application manifest."
        },
        "upgradePolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ApplicationUpgradePolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the policy for a monitored application upgrade."
        }
      },
      "description": "The application resource properties."
    },
    "ApplicationTypeResourceProperties": {
      "type": "object",
      "properties": {},
      "description": "The application type name properties"
    },
    "ApplicationTypeVersionResourceProperties": {
      "type": "object",
      "properties": {
        "appPackageUrl": {
          "type": "string",
          "description": "The URL to the application package"
        }
      },
      "required": [
        "appPackageUrl"
      ],
      "description": "The properties of the application type version resource."
    },
    "ApplicationUpgradePolicy": {
      "type": "object",
      "properties": {
        "applicationHealthPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ArmApplicationHealthPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Defines a health policy used to evaluate the health of an application or one of its children entities.\n"
        },
        "forceRestart": {
          "oneOf": [
            {
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "rollingUpgradeMonitoringPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ArmRollingUpgradeMonitoringPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The policy used for monitoring the application upgrade"
        },
        "upgradeReplicaSetCheckTimeout": {
          "type": "string",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer)."
        }
      },
      "description": "Describes the policy for a monitored application upgrade."
    },
    "ArmApplicationHealthPolicy": {
      "type": "object",
      "properties": {
        "considerWarningAsError": {
          "oneOf": [
            {
              "type": "boolean",
              "default": false
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Indicates whether warnings are treated with the same severity as errors."
        },
        "defaultServiceTypeHealthPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ArmServiceTypeHealthPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Represents the health policy used to evaluate the health of services belonging to a service type.\n"
        },
        "maxPercentUnhealthyDeployedApplications": {
          "oneOf": [
            {
              "type": "integer",
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.\nThe percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.\nThis is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.\nThe computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.\n"
        },
        "serviceTypeHealthPolicyMap": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ArmServiceTypeHealthPolicy"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Defines a ServiceTypeHealthPolicy per service type name.\n\nThe entries in the map replace the default service type health policy for each specified service type.\nFor example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.\nWith policy per service type, there's more granular control of the health of the service.\n\nIf no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.\n"
        }
      },
      "description": "Defines a health policy used to evaluate the health of an application or one of its children entities.\n"
    },
    "ArmRollingUpgradeMonitoringPolicy": {
      "type": "object",
      "properties": {
        "failureAction": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Rollback",
                "Manual"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The activation Mode of the service package."
        },
        "healthCheckRetryTimeout": {
          "type": "string",
          "default": "PT0H10M0S",
          "description": "The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "healthCheckStableDuration": {
          "type": "string",
          "default": "PT0H2M0S",
          "description": "The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "healthCheckWaitDuration": {
          "type": "string",
          "default": "0",
          "description": "The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "upgradeDomainTimeout": {
          "type": "string",
          "default": "P10675199DT02H48M05.4775807S",
          "description": "The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        },
        "upgradeTimeout": {
          "type": "string",
          "default": "P10675199DT02H48M05.4775807S",
          "description": "The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds."
        }
      },
      "description": "The policy used for monitoring the application upgrade"
    },
    "ArmServiceTypeHealthPolicy": {
      "type": "object",
      "properties": {
        "maxPercentUnhealthyPartitionsPerService": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.\n"
        },
        "maxPercentUnhealthyReplicasPerPartition": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.\n"
        },
        "maxPercentUnhealthyServices": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum percentage of services allowed to be unhealthy before your application is considered in error.\n"
        }
      },
      "description": "Represents the health policy used to evaluate the health of services belonging to a service type.\n"
    },
    "AzureActiveDirectory": {
      "type": "object",
      "properties": {
        "clientApplication": {
          "type": "string",
          "description": "Azure active directory client application id."
        },
        "clusterApplication": {
          "type": "string",
          "description": "Azure active directory cluster application id."
        },
        "tenantId": {
          "type": "string",
          "description": "Azure active directory tenant id."
        }
      },
      "description": "The settings to enable AAD authentication on the cluster."
    },
    "CertificateDescription": {
      "type": "object",
      "properties": {
        "thumbprint": {
          "type": "string",
          "description": "Thumbprint of the primary certificate."
        },
        "thumbprintSecondary": {
          "type": "string",
          "description": "Thumbprint of the secondary certificate."
        },
        "x509StoreName": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "AddressBook",
                "AuthRoot",
                "CertificateAuthority",
                "Disallowed",
                "My",
                "Root",
                "TrustedPeople",
                "TrustedPublisher"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The local certificate store location."
        }
      },
      "required": [
        "thumbprint"
      ],
      "description": "Describes the certificate details."
    },
    "ClientCertificateCommonName": {
      "type": "object",
      "properties": {
        "certificateCommonName": {
          "type": "string",
          "description": "The common name of the client certificate."
        },
        "certificateIssuerThumbprint": {
          "type": "string",
          "description": "The issuer thumbprint of the client certificate."
        },
        "isAdmin": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster."
        }
      },
      "required": [
        "certificateCommonName",
        "certificateIssuerThumbprint",
        "isAdmin"
      ],
      "description": "Describes the client certificate details using common name."
    },
    "ClientCertificateThumbprint": {
      "type": "object",
      "properties": {
        "certificateThumbprint": {
          "type": "string",
          "description": "The thumbprint of the client certificate."
        },
        "isAdmin": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster."
        }
      },
      "required": [
        "certificateThumbprint",
        "isAdmin"
      ],
      "description": "Describes the client certificate details using thumbprint."
    },
    "ClusterHealthPolicy": {
      "type": "object",
      "properties": {
        "applicationHealthPolicies": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ApplicationHealthPolicy"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Defines a map that contains specific application health policies for different applications.\nEach entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.\nThe application name should include the 'fabric:' URI scheme.\nThe map is empty by default.\n"
        },
        "maxPercentUnhealthyApplications": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.\n\nThe percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.\nIf the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.\nThis is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.\nThe computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.\n"
        },
        "maxPercentUnhealthyNodes": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.\n\nThe percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.\nIf the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.\nThe percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.\nThe computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.\n\nIn large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.\n"
        }
      },
      "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node.\n"
    },
    "ClusterProperties": {
      "type": "object",
      "properties": {
        "addOnFeatures": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "RepairManager",
                  "DnsService",
                  "BackupRestoreService",
                  "ResourceMonitorService"
                ]
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of add-on features to enable in the cluster."
        },
        "azureActiveDirectory": {
          "oneOf": [
            {
              "$ref": "#/definitions/AzureActiveDirectory"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The settings to enable AAD authentication on the cluster."
        },
        "certificate": {
          "oneOf": [
            {
              "$ref": "#/definitions/CertificateDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the certificate details."
        },
        "certificateCommonNames": {
          "oneOf": [
            {
              "$ref": "#/definitions/ServerCertificateCommonNames"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes a list of server certificates referenced by common name that are used to secure the cluster."
        },
        "clientCertificateCommonNames": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientCertificateCommonName"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of client certificates referenced by common name that are allowed to manage the cluster."
        },
        "clientCertificateThumbprints": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClientCertificateThumbprint"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of client certificates referenced by thumbprint that are allowed to manage the cluster."
        },
        "clusterCodeVersion": {
          "type": "string",
          "description": "The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**."
        },
        "diagnosticsStorageAccountConfig": {
          "oneOf": [
            {
              "$ref": "#/definitions/DiagnosticsStorageAccountConfig"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The storage account information for storing Service Fabric diagnostic logs."
        },
        "eventStoreServiceEnabled": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Indicates if the event store service is enabled."
        },
        "fabricSettings": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SettingsSectionDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of custom fabric settings to configure the cluster."
        },
        "managementEndpoint": {
          "type": "string",
          "description": "The http management endpoint of the cluster."
        },
        "nodeTypes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeTypeDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of node types in the cluster."
        },
        "reliabilityLevel": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "None",
                "Bronze",
                "Silver",
                "Gold",
                "Platinum"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).\n\n  - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.\n  - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.\n  - Silver - Run the System services with a target replica set count of 5.\n  - Gold - Run the System services with a target replica set count of 7.\n  - Platinum - Run the System services with a target replica set count of 9.\n."
        },
        "reverseProxyCertificate": {
          "oneOf": [
            {
              "$ref": "#/definitions/CertificateDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the certificate details."
        },
        "reverseProxyCertificateCommonNames": {
          "oneOf": [
            {
              "$ref": "#/definitions/ServerCertificateCommonNames"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes a list of server certificates referenced by common name that are used to secure the cluster."
        },
        "upgradeDescription": {
          "oneOf": [
            {
              "$ref": "#/definitions/ClusterUpgradePolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the policy used when upgrading the cluster."
        },
        "upgradeMode": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Automatic",
                "Manual"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The upgrade mode of the cluster when new Service Fabric runtime version is available.\n\n  - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.\n  - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.\n."
        },
        "vmImage": {
          "type": "string",
          "description": "The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used."
        }
      },
      "required": [
        "managementEndpoint",
        "nodeTypes"
      ],
      "description": "Describes the cluster resource properties."
    },
    "clusters_applications_childResource": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The name of the application resource."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ApplicationResourceProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The application resource properties."
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "applications"
          ]
        }
      },
      "required": [
        "apiVersion",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters/applications"
    },
    "clusters_applications_services_childResource": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The name of the service resource in the format of {applicationName}~{serviceName}."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ServiceResourceProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The service resource properties."
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "services"
          ]
        }
      },
      "required": [
        "apiVersion",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters/applications/services"
    },
    "clusters_applicationTypes_childResource": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The name of the application type name resource."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ApplicationTypeResourceProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The application type name properties"
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "applicationTypes"
          ]
        }
      },
      "required": [
        "apiVersion",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters/applicationTypes"
    },
    "clusters_applicationTypes_versions_childResource": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "enum": [
            "2019-03-01-preview"
          ]
        },
        "location": {
          "type": "string",
          "description": "Azure resource location."
        },
        "name": {
          "type": "string",
          "description": "The application type version."
        },
        "properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/ApplicationTypeVersionResourceProperties"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The properties of the application type version resource."
        },
        "tags": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Azure resource tags."
        },
        "type": {
          "type": "string",
          "enum": [
            "versions"
          ]
        }
      },
      "required": [
        "apiVersion",
        "name",
        "properties",
        "type"
      ],
      "description": "Microsoft.ServiceFabric/clusters/applicationTypes/versions"
    },
    "ClusterUpgradeDeltaHealthPolicy": {
      "type": "object",
      "properties": {
        "applicationDeltaHealthPolicies": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ApplicationDeltaHealthPolicy"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Defines a map that contains specific application delta health policies for different applications.\nEach entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.\nThe application name should include the 'fabric:' URI scheme.\nThe map is empty by default.\n"
        },
        "maxPercentDeltaUnhealthyApplications": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of applications health degradation allowed during cluster upgrades.\nThe delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.\nThe check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.\n"
        },
        "maxPercentDeltaUnhealthyNodes": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.\nThe delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.\nThe check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.\n"
        },
        "maxPercentUpgradeDomainDeltaUnhealthyNodes": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.\nThe delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.\nThe check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.\n"
        }
      },
      "required": [
        "maxPercentDeltaUnhealthyApplications",
        "maxPercentDeltaUnhealthyNodes",
        "maxPercentUpgradeDomainDeltaUnhealthyNodes"
      ],
      "description": "Describes the delta health policies for the cluster upgrade."
    },
    "ClusterUpgradePolicy": {
      "type": "object",
      "properties": {
        "deltaHealthPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ClusterUpgradeDeltaHealthPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes the delta health policies for the cluster upgrade."
        },
        "forceRestart": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data)."
        },
        "healthCheckRetryTimeout": {
          "type": "string",
          "description": "The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckStableDuration": {
          "type": "string",
          "description": "The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthCheckWaitDuration": {
          "type": "string",
          "description": "The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "healthPolicy": {
          "oneOf": [
            {
              "$ref": "#/definitions/ClusterHealthPolicy"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Defines a health policy used to evaluate the health of the cluster or of a cluster node.\n"
        },
        "upgradeDomainTimeout": {
          "type": "string",
          "description": "The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "upgradeReplicaSetCheckTimeout": {
          "type": "string",
          "description": "The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        },
        "upgradeTimeout": {
          "type": "string",
          "description": "The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format."
        }
      },
      "required": [
        "healthCheckRetryTimeout",
        "healthCheckStableDuration",
        "healthCheckWaitDuration",
        "healthPolicy",
        "upgradeDomainTimeout",
        "upgradeReplicaSetCheckTimeout",
        "upgradeTimeout"
      ],
      "description": "Describes the policy used when upgrading the cluster."
    },
    "DiagnosticsStorageAccountConfig": {
      "type": "object",
      "properties": {
        "blobEndpoint": {
          "type": "string",
          "description": "The blob endpoint of the azure storage account."
        },
        "protectedAccountKeyName": {
          "type": "string",
          "description": "The protected diagnostics storage key name."
        },
        "queueEndpoint": {
          "type": "string",
          "description": "The queue endpoint of the azure storage account."
        },
        "storageAccountName": {
          "type": "string",
          "description": "The Azure storage account name."
        },
        "tableEndpoint": {
          "type": "string",
          "description": "The table endpoint of the azure storage account."
        }
      },
      "required": [
        "blobEndpoint",
        "protectedAccountKeyName",
        "queueEndpoint",
        "storageAccountName",
        "tableEndpoint"
      ],
      "description": "The storage account information for storing Service Fabric diagnostic logs."
    },
    "EndpointRangeDescription": {
      "type": "object",
      "properties": {
        "endPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "End port of a range of ports"
        },
        "startPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Starting port of a range of ports"
        }
      },
      "required": [
        "endPort",
        "startPort"
      ],
      "description": "Port range details"
    },
    "NodeTypeDescription": {
      "type": "object",
      "properties": {
        "applicationPorts": {
          "oneOf": [
            {
              "$ref": "#/definitions/EndpointRangeDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Port range details"
        },
        "capacities": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has."
        },
        "clientConnectionEndpointPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The TCP cluster management endpoint port."
        },
        "durabilityLevel": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Bronze",
                "Silver",
                "Gold"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).\n\n  - Bronze - No privileges. This is the default.\n  - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.\n  - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.\n."
        },
        "ephemeralPorts": {
          "oneOf": [
            {
              "$ref": "#/definitions/EndpointRangeDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Port range details"
        },
        "httpGatewayEndpointPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The HTTP cluster management endpoint port."
        },
        "isPrimary": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters."
        },
        "name": {
          "type": "string",
          "description": "The name of the node type."
        },
        "placementProperties": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {}
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run."
        },
        "reverseProxyEndpointPort": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The endpoint used by reverse proxy."
        },
        "vmInstanceCount": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1,
              "maximum": 2147483647
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource."
        }
      },
      "required": [
        "clientConnectionEndpointPort",
        "httpGatewayEndpointPort",
        "isPrimary",
        "name",
        "vmInstanceCount"
      ],
      "description": "Describes a node type in the cluster, each node type represents sub set of nodes in the cluster."
    },
    "PartitionSchemeDescription": {
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/definitions/SingletonPartitionSchemeDescription"
        }
      ],
      "properties": {},
      "description": "Describes how the service is partitioned."
    },
    "ServerCertificateCommonName": {
      "type": "object",
      "properties": {
        "certificateCommonName": {
          "type": "string",
          "description": "The common name of the server certificate."
        },
        "certificateIssuerThumbprint": {
          "type": "string",
          "description": "The issuer thumbprint of the server certificate."
        }
      },
      "required": [
        "certificateCommonName",
        "certificateIssuerThumbprint"
      ],
      "description": "Describes the server certificate details using common name."
    },
    "ServerCertificateCommonNames": {
      "type": "object",
      "properties": {
        "commonNames": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServerCertificateCommonName"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The list of server certificates referenced by common name that are used to secure the cluster."
        },
        "x509StoreName": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "AddressBook",
                "AuthRoot",
                "CertificateAuthority",
                "Disallowed",
                "My",
                "Root",
                "TrustedPeople",
                "TrustedPublisher"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The local certificate store location."
        }
      },
      "description": "Describes a list of server certificates referenced by common name that are used to secure the cluster."
    },
    "ServiceCorrelationDescription": {
      "type": "object",
      "properties": {
        "scheme": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Invalid",
                "Affinity",
                "AlignedAffinity",
                "NonAlignedAffinity"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The ServiceCorrelationScheme which describes the relationship between this service and the service specified via ServiceName."
        },
        "serviceName": {
          "type": "string",
          "description": "The full name of the service with 'fabric:' URI scheme."
        }
      },
      "required": [
        "scheme",
        "serviceName"
      ],
      "description": "Creates a particular correlation between services."
    },
    "ServiceLoadMetricDescription": {
      "type": "object",
      "properties": {
        "defaultLoad": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric."
        },
        "name": {
          "type": "string",
          "description": "The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive."
        },
        "primaryDefaultLoad": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica."
        },
        "secondaryDefaultLoad": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica."
        },
        "weight": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Zero",
                "Low",
                "Medium",
                "High"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The service load metric relative weight, compared to other metrics configured for this service, as a number."
        }
      },
      "required": [
        "name"
      ],
      "description": "Specifies a metric to load balance a service during runtime."
    },
    "ServicePlacementPolicyDescription": {
      "type": "object",
      "properties": {},
      "description": "Describes the policy to be used for placement of a Service Fabric service."
    },
    "ServiceResourceProperties": {
      "type": "object",
      "oneOf": [
        {
          "$ref": "#/definitions/StatefulServiceProperties"
        },
        {
          "$ref": "#/definitions/StatelessServiceProperties"
        }
      ],
      "properties": {
        "correlationScheme": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceCorrelationDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "A list that describes the correlation of the service with other services."
        },
        "defaultMoveCost": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Zero",
                "Low",
                "Medium",
                "High"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Specifies the move cost for the service."
        },
        "partitionDescription": {
          "oneOf": [
            {
              "$ref": "#/definitions/PartitionSchemeDescription"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "Describes how the service is partitioned."
        },
        "placementConstraints": {
          "type": "string",
          "description": "The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\"."
        },
        "serviceLoadMetrics": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceLoadMetricDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The service load metrics is given as an array of ServiceLoadMetricDescription objects."
        },
        "servicePackageActivationMode": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "SharedProcess",
                "ExclusiveProcess"
              ]
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The activation Mode of the service package."
        },
        "servicePlacementPolicies": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServicePlacementPolicyDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "A list that describes the correlation of the service with other services."
        },
        "serviceTypeName": {
          "type": "string",
          "description": "The name of the service type"
        }
      },
      "description": "The service resource properties."
    },
    "ServiceTypeDeltaHealthPolicy": {
      "type": "object",
      "properties": {
        "maxPercentDeltaUnhealthyServices": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum allowed percentage of services health degradation allowed during cluster upgrades.\nThe delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation.\nThe check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.\n"
        }
      },
      "description": "Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster.\n"
    },
    "ServiceTypeHealthPolicy": {
      "type": "object",
      "properties": {
        "maxPercentUnhealthyServices": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "default": "0"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The maximum percentage of services allowed to be unhealthy before your application is considered in error.\n"
        }
      },
      "description": "Represents the health policy used to evaluate the health of services belonging to a service type.\n"
    },
    "SettingsParameterDescription": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The parameter name of fabric setting."
        },
        "value": {
          "type": "string",
          "description": "The parameter value of fabric setting."
        }
      },
      "required": [
        "name",
        "value"
      ],
      "description": "Describes a parameter in fabric settings of the cluster."
    },
    "SettingsSectionDescription": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The section name of the fabric settings."
        },
        "parameters": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SettingsParameterDescription"
              }
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The collection of parameters in the section."
        }
      },
      "required": [
        "name",
        "parameters"
      ],
      "description": "Describes a section in the fabric settings of the cluster."
    },
    "SingletonPartitionSchemeDescription": {
      "type": "object",
      "properties": {
        "partitionScheme": {
          "type": "string",
          "enum": [
            "Singleton"
          ]
        }
      },
      "required": [
        "partitionScheme"
      ],
      "description": "SingletonPartitionSchemeDescription"
    },
    "StatefulServiceProperties": {
      "type": "object",
      "properties": {
        "hasPersistedState": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false."
        },
        "minReplicaSetSize": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The minimum replica set size as a number."
        },
        "quorumLossWaitDuration": {
          "type": "string",
          "format": "date-time",
          "description": "The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format (hh:mm:ss.s)."
        },
        "replicaRestartWaitDuration": {
          "type": "string",
          "format": "date-time",
          "description": "The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format (hh:mm:ss.s)."
        },
        "serviceKind": {
          "type": "string",
          "enum": [
            "Stateful"
          ]
        },
        "standByReplicaKeepDuration": {
          "type": "string",
          "format": "date-time",
          "description": "The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format (hh:mm:ss.s)."
        },
        "targetReplicaSetSize": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 1
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The target replica set size as a number."
        }
      },
      "required": [
        "serviceKind"
      ],
      "description": "The properties of a stateful service resource."
    },
    "StatelessServiceProperties": {
      "type": "object",
      "properties": {
        "instanceCount": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": -1
            },
            {
              "$ref": "https://schema.management.azure.com/schemas/common/definitions.json#/definitions/expression"
            }
          ],
          "description": "The instance count."
        },
        "serviceKind": {
          "type": "string",
          "enum": [
            "Stateless"
          ]
        }
      },
      "required": [
        "serviceKind"
      ],
      "description": "The properties of a stateless service resource."
    }
  }
}